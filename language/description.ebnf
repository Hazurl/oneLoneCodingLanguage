(*
    Basic
*)

uppercase_letters := ? A-Z ?;
lowercase_letters := ? a-z ?;
letters := uppercase-letters | lowercase-letters;
digits := ? 0-9 ?;

reserved_indentifier := "type" | "alias";
type_identifier := uppercase_letters {letters | digits | "_"};
(* identifier not in reserved_indentifier *)
var_identifier := lowercase_letters {letters | digits | "_"} \ reserved_indentifier; 

operator_list := "+" | "*" | "/" | "-" | "=" | "<" | ">" | "!" | "." | "|" | "^" | "$" | "%" | ":" | "~" | "#" | "&";
operator := operator_list {operator_list};
reserved_operator := ;
(* operators not in reserved_operator *)
user_operator := operator \ reserved_operator; 

(*
    Types
*)

simple_type := 
    type_identifier {type}
;

(*
    ex: 
        Bool
        Maybe (Maybe Int)
        Either (Int -> Bool) (Float -> Bool)
        Int -> Maybe Int -> Int
        F A -> (A -> F B) -> F B
*)

type :=
    simple_type ["->" type]
|   "(" simple_type "->" type ")" ["->" type]
;

(*
    ex:
        type Maybe A = Nothing | Just A
        type Vec3 T = T & T & T
        alias Vec3f = Vec3 Float
        type ComposeFunction A B C = (B -> C) -> (A -> C) -> A -> C
*)

alias_type_declaration :=
    simple_type "=" type ({"|" type} | {"&" type})
;

type_declaration :=
    "type" alias_type_declaration
;

alias_declaration :=
    "alias" alias_type_declaration
;

